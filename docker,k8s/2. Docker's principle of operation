# 1.도커의 구조
- 운영체제 위에서 도커 엔진이 동작하고, 도커 엔진 위에서 컨테이너가 동작한다.
- 프로그램이나 데이터는 컨테이너 안에 위치한다.

## 운영체게 비슷한 것
- 모든 컨테이너는 '리눅스 운영체제 비슷한 무언가'가 들어있다.

### 운영체제
- 운영체제는 `소프트웨어나 프로그램의 명령을 하드웨어에 전달하는 역할`을 한다.
- 실제로 컴퓨터를 구성하는 하드웨어는 사람이 작성한 프로그램 코드를 인식할 수 없다.
- 사람이 작성한 프로그램 코드를 하드웨어가 이해하고 수행할 수 있도록 해석하고 변환해주는 기능을 하는 것이다.

## 리눅스 운영체제 비슷한 무언가
- 운영체제는 `커널`이라는 부분과 `그 외의 주변 부분`으로 구성된다.
- 컨테이너 안에 있는 `리눅스 운영체제 비슷한 무언가`가 바로 리눅스의 `주변 부분`인 것이다.
- 운영체제 자체가 컨테이너 안에 들어가 있지 않고 `주변 부분`만 들어가 있는 덕분에 가장 큰 장점인 가벼움을 얻을 수 있는 것이다.

# 2.이미지와 컨테이너
- 이미지는 컨테이너를 찍어내는 설계도 역할을 한다.
- 이미지 자체로는 쓸모가 없고, 컨테이너를 만드는 데 사용한다.
- 즉, 우리가 사용하는 것은 이미지로 만들어낸 컨테이너다.
- 컨테이너로부터 이미지를 만들 수도 있다.

## 도커 허브
- 도커 허브는 공식적으로 운영되는 도커 레지스트리(이미지를 배포하는 서비스)이다.
- 도커 허브를 통해서 이미지를 구할 수 있다.
- 물론 이 뿐만 아니라 다양한 경로를 통해서 이미지를 구할 순 있다.

# 3.컨테이너의 생애주기와 데이터 저장
## 생애주기
- 컨테이너는 일종의 `일회용품`이다.
- 컨테이너는 쉽게 만들 수 있다. 그리고 여러 개를 동시에 가동할 수 있다.
- 오히려 여러 개의 컨테이너를 일일이 업데이트 하는 작업이 더욱 수고가 드는 수준이다.
- 따라서 프로그램(서버)의 새로운 버전이 나오면 새로운 컨테이너로 갈아타는 것이 훨씬 간단하다.
- 따라서 컨테이너의 생애주기는 생성, 실행, 종료, 폐기이다. 그 사이에 수정(업데이트)는 없다.
## 데이터 저장
- 컨테이너를 폐기하면 당연히 그 안에 있던 데이터는 함께 삭제된다.
- 따라서 유지되어야 하는 데이터는 도커가 설치된 물리적 서버(호스트)의 디스크를 마운트해 이 디스크에 저장한다.
- 이렇게 외부 공간에 저장하면 다른 컨테이너에도 데이터를 공유할 수 있다.
- 그 말은 즉, 컨테이너가 수차례 바뀌어도 데이터는 유지된다는 뜻이다.

# 4. 도커의 장점과 단점
## 장점
- 한 대의 물리 서버에 여러 서버를 띄울 수 있다.
- 서버 관리가 용이하다.
  - 다른 소프트웨어에 영향을 끼치지 않는다.
  - 컨테이너 교체로 간단하게 업데이트 할 수 있다.
  - 컨테이너와 이미지를 활용하여 간단하게 확장, 배포, 테스트 등을 수행할 수 있다.
- 다루기 쉽다.
  - 준비된 이미지와 간단한 명령어로 서버를 실행할 수 있다.

## 단점
- 리눅스용 소프트웨어만 지원한다.
- 물리 서버에 문제가 생기면 모든 컨테이너에 영향을 미치는 것은 동일하다.
- 컨테이너를 여러개 사용하지 않으면 장점을 느끼기가 어렵다.
